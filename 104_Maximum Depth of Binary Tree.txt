104. Maximum Depth of Binary Tree


from collections import *
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        depth = 0
        if root is None:
            return depth
        queue = deque([])
        queue.append(root)
        while len(queue) != 0 :
            depth+=1
            level_size = len(queue)
            for i in range(level_size):
                current = queue.popleft()
                if current.left is not None:
                    queue.append(current.left)
                if current.right is not None:
                    queue.append(current.right)
        return depth


# solution 2
class Solution:
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        if not root:
            return 0
        left_height = self.maxDepth(root.left)
        right_height = self.maxDepth(root.right)

        return 1 + max(left_height,right_height)
        